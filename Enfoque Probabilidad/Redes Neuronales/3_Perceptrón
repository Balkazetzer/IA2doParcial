import numpy as np

# Definir el PerceptrÃ³n
class Perceptron:
    def __init__(self, learning_rate=0.1, n_iterations=1000):
        self.learning_rate = learning_rate
        self.n_iterations = n_iterations

    def fit(self, X, y):
        self.weights = np.zeros(X.shape[1])
        self.bias = 0
        for _ in range(self.n_iterations):
            for xi, target in zip(X, y):
                update = self.learning_rate * (target - self.predict(xi))
                self.weights += update * xi
                self.bias += update

    def predict(self, X):
        z = np.dot(X, self.weights) + self.bias
        return np.where(z >= 0.0, 1, 0)

# Ejemplo de uso
X = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])
y = np.array([0, 0, 0, 1])

perceptron = Perceptron(learning_rate=0.1, n_iterations=10)
perceptron.fit(X, y)

print(f"Pesos aprendidos: {perceptron.weights}")
print(f"Bias aprendido: {perceptron.bias}")
