# Iteración de Políticas
def iteracion_politicas(estados, acciones, recompensas, transiciones, gamma=0.9):
    """
    Iteración de políticas para encontrar la política óptima.
    :param estados: Lista de estados.
    :param acciones: Lista de acciones.
    :param recompensas: Diccionario de recompensas.
    :param transiciones: Diccionario de transiciones.
    :param gamma: Factor de descuento.
    :return: Política óptima.
    """
    politica = {s: acciones[0] for s in estados}
    while True:
        V = {s: 0 for s in estados}
        while True:
            delta = 0
            for s in estados:
                v = V[s]
                a = politica[s]
                V[s] = sum(transiciones[(s, a)][sp] * (recompensas[(s, a, sp)] + gamma * V[sp]) for sp in estados)
                delta = max(delta, abs(v - V[s]))
            if delta < 1e-3:
                break
        politica_estable = True
        for s in estados:
            vieja_accion = politica[s]
            politica[s] = max(acciones, key=lambda a: sum(transiciones[(s, a)][sp] * (recompensas[(s, a, sp)] + gamma * V[sp]) for sp in estados))
            if vieja_accion != politica[s]:
                politica_estable = False
        if politica_estable:
            break
    return politica

# Ejemplo de uso
estados = ['A', 'B']
acciones = ['1', '2']
recompensas = {('A', '1', 'B'): 10, ('A', '2', 'B'): 5, ('B', '1', 'A'): -1, ('B', '2', 'A'): 0}
transiciones = {('A', '1'): {'B': 1.0}, ('A', '2'): {'B': 1.0}, ('B', '1'): {'A': 1.0}, ('B', '2'): {'A': 1.0}}
politica = iteracion_politicas(estados, acciones, recompensas, transiciones)
print(f"Política óptima: {politica}")
